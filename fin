#!/usr/bin/env python3

from system.App import App
from system.Command import Command
from system.Cli import Cli
from system.Env import Env

from hooks.PrePlug import PrePlug
from hooks.PostPlug import PostPlug

cli = Cli()

if cli.get_command() is not None:
    app = App()
    env = Env()
    command = Command(env, cli)

    # Load the ENV from .env file
    env.load_env()

    # If the command is not a Global Command
    if not command.is_global:
        # Check the Env Existence.
        # If not, throw error and exit
        env.check_env_existence(["PLUG", "HOST"])

    # Pre Plug Hooks
    PrePlug(app=app, env=env, cli=cli)

    # Action passed to Plugin
    command.trigger_plug()

    # Pre Plug Hooks
    PostPlug(app=app, env=env, cli=cli)

# Execute default Actions below
# TODO : Need to add logics for common commands
print("\n\n### default action")
# Finish the terminal session
raise SystemExit

################################################################

from datetime import datetime

from system.docker.Asset import Asset
from system.docker.Docker import Docker
from system.docker.App import App

docker = Docker()
app = App()


envs = {
    "DATABASE_URL": "",
    "PGHERO_USERNAME": "",
    "PGHERO_PASSWORD": "",
}

Asset().start_proxy()
app.run(
    host="pghero.localhost",
    name="pghero",
    image="ankane/pghero",
    envs=envs,
    container_port=8080,
)

## Table representation
from system.Table import Table

table = Table()
table.set_header(["Container ID", "Container Name", "Service", "Site", "Status", "Time"])

containers = docker.container.list(all=True, filters={"label": "com.example.vendor=dockr"})
tableData = []
for container in containers:
    dateTime = datetime.fromisoformat(container.attrs["State"]["StartedAt"]).ctime()
    table.add_row(
        [
            container.attrs["Config"]["Hostname"],
            container.attrs["Name"].strip("/"),
            container.attrs["Config"]["Labels"]["com.example.service"],
            "http://" + container.attrs["Config"]["Labels"]["com.example.host"],
            container.attrs["State"]["Status"].capitalize(),
            dateTime,  # TODO : Need to change the Date time string to Current TimeZone
        ]
    )

table.build()

raise SystemExit


# ------------------------------------------------------

# from helpers.Docker import Asset
# from helpers.Env import Env

# print(Asset().canStartAsset('mysql'))

from system.App import App
from system.Env import Env

app = App()

env = Env()
env.load_env()

print(env.pure("DOCKR_SITE"))

app.terminate()

from docker.Docker import Docker

docker = Docker()
env = Env()

docker.addVolume(env.env("PROJECT_ROOT_DIR"), "/var/www/html").addPort(81, 80).addEnv(
    "DOCKR_COMPOSER_VERSION", "2"
).addLabels("TYPE", "project").addLabels("SERVICE", "web").setImage("sharanvelu/laravel-php:8.0").run()

raise SystemExit


# ------------------------------------------------------

# Custom Import
from helpers.Command import Command, Output
from helpers.System import System

command = Command()
output = Output()
system = System()

if command.get_command() in ["up", "down", "stop"]:
    from bin.Container import Container

    method = getattr(Container(), command.get_command())
    method(command)
else:
    output.print_ln("Help")
    output.print_ln("None known command given...")

system.terminate()

# # # # Import dynamic Classes
# nameSpace = __import__('plugins.Laravel')
# module = getattr(nameSpace, 'Laravel')
# pluginClass = getattr(module, 'Laravel')
# method = getattr(pluginClass, 'image')
